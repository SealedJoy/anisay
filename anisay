#!/usr/bin/env python3
# Anisay - modern version of cowsay

import random, subprocess, signal, sys, os, argparse, textwrap
#from multiprocessing import process
import multiprocessing
from time import sleep
#from operator import itemgetter
#import threading
from blessed import Terminal
term = Terminal()

# # # USER SETTINGS # # #
animation_mouth_line = 3 #must be 1 or above
h_padding_int = 2
v_padding_int = 1
# # # END USER SETTINGS # # #

# init on the fly vars
art_max_height = 10
art_max_width = 8 #edge to edge of ascii size
space_for_text = 10 
space_for_art = 10
text_max_height = 10

parser = argparse.ArgumentParser(description='animated ascii playback / text pager inspired by cowsay')
parser.add_argument("-i", "--input", type=str, action='extend', nargs="+", help='space seperated, strings for each page')
parser.add_argument("-c", "--ascii",metavar="DIR",type=str, default='octelpus', help="ascii art/character folder to select (default: octelpus) place in ~/.config/anisay/ascii")
parser.add_argument("-x", "--execute",metavar="COMMAND",type=str, help="Executable to display std output from: (eg: fortune)")
parser.add_argument("-l", "--loop", action='store_true', default=False, help="Rerun command continiously")
parser.add_argument("-p", "--pause", metavar="SECS", type=float, help="Pause at the end of each page")
parser.add_argument("-f", "--framerate", metavar="SECS", type=float, default='0.15', help="ascii art animation framerate (Default: 0.15)")
parser.add_argument("-s", "--speed",metavar="SECS",type=float, default='0.004', help="Text playback speed per symbol printed (Default: 0.004)")
parser.add_argument("--nofx", action='store_false', default=True, help="disable the text printing effect")
parser.add_argument("-t", "--timeout", metavar="SECS", help="pause for a timeout after text has been displayed then exit")
parser.add_argument("--clear",metavar="SECS",type=float, default='0.0005', help="Speed at which text is cleared from the screen (default: 0.0005)")
parser.add_argument("-a", "--auto", action='store_true', default=False, help="automatically progress through pages")
parser.add_argument("-d", "--debug", action='store_true', default=False, help="enable debug messages")
parser.add_argument("-gh", "--github", action='store_true', help="open the github page for the anisay project")
#parser.add_argument("--color", type=list, default=[255,255,255], help="relative text name for ascii art color")
parser.add_argument('--version', action='version', version='%(prog)s 0.2 by SealyJ')

args = parser.parse_args()
speed = float(args.speed)
alphabet = " ‧•-|x‣"
pause_alphabet = "․‥…"
homedir = os.path.expanduser("~")
animation_folder_path = homedir + "/.config/anisay/ascii/{}/".format(args.ascii)


def debug(input):
    if args.debug:
        print("DEBUG: " + input)

debug("termsize = " + str(term.height) + " high by " + str(term.width))

if args.github:
    gh_url="https://github.com/sealedjoy/anisay"
    print("anisay: opening github project page")
    os_type = subprocess.run(["uname", "-o"],capture_output=True,timeout=4)
    if os_type.stdout.decode().strip() == "Android":
        silence = subprocess.run(["am", "start", "--user", "0", "-a", "android.intent.action.VIEW", "-d", gh_url],capture_output=True)
    else:
        import webbrowser
        webbrowser.open_new(gh_url)
    sys.exit(0)

#if args.color:
#    if args.debug:
#        print("DEBUG: color set to: " + str(args.color))

#enter_interactive_mode = True
# stdin / pipe awareness
enter_interactive_mode = True
speech_input = []
if args.input or args.execute:
    speech_input = args.input
    pipe_detected = False
else:
    debug("pipe / stdin detected ")
    pipe_detected = True
    for line in sys.stdin:
        speech_input.append(line)

if args.auto is False: #full auto mode
    enter_interactive_mode = True
    debug("auto disabled - interactive mode = True")
elif args.auto is True:
    enter_interactive_mode = False
    debug("auto enabled - interactive mode = False")

if args.timeout: 
    enter_interactive_mode = False
    debug("timeout enabled interactive mode = False ")

def calculate_working_area():
    global h_padding
    global v_padding
    global space_for_art
    global space_for_text
    global text_max_height 
    h_padding = ''
    for space in range(0,h_padding_int):
        h_padding = h_padding + ' '
    v_padding = ''
    for space in range(v_padding_int):
        v_padding = v_padding + ' '
    text_max_height = term.height - 2
    space_for_text = (term.width - art_max_width) - h_padding_int*2
    space_for_art = (term.width - space_for_text) - h_padding_int*2

#class myThread (threading.Thread):
#   def __init__(self, name, page, text_wrapped):
#      threading.Thread.__init__(self,name=name)
#      self.page = page
#      self.name = name
#      self.text_wrapped = text_wrapped
#   def run(self):
#     # print("Starting " + self.name)
 #    # sleep(1)
     # print_time(self.name, 5, self.counter)
#      render_text(self.name, self.page, self.text_wrapped)
#     # print("Exiting " + self.name)#
#   def shutdown(self):
#      self.shutdown_flag.set()
#      pass

def on_resize(*args): #globals?
    global text_max_height
    global space_for_text
    global space_for_art
    global h_padding_int
    global text_wrapped
    calculate_working_area()
    text_max_height = term.height - 2
    space_for_text = (term.width - art_max_width) - h_padding_int*2
    space_for_art = (term.width - space_for_text) - h_padding_int*2
    sleep(0.001)
    # HALT TEXT RENDER THREAD
    #clear_entire()
    print(term.home + term.clear)
    sys.exit()
    #print(term.clear)
    #kill threads
    #text_wrapped = text_wrap(args.input)
    # END RENDER THREADS here or from parent func?
    #wrapped_text = wrap_text(user_input)
    #space_for_text = (term.width - art_max_width) - h_padding_int*2
    #space_for_art = (term.width - space_for_text) - h_padding_int*2
    #print(term.clear)
    #kill threads here
    #start_animation_thread(page,text_wrapped)
    #start_animate_text_thread(page,text_wrapped)
    #return wrapped_text

def check_term(animation):
    get_art_size(animation)
    calculate_working_area()
    global art_max_width
    global art_max_height
   # print("art max width: " + str(art_max_width))
   # print("art max height: " + str(art_max_height))
   # sleep(2)
    if (term.height < art_max_height + 2) or (term.width < art_max_width +5):
        print("anisay: Term size needs to be at least " + str(art_max_width +5) + " wide by " + str(art_max_height + 2) + " high")
        print("anisay: Current size is " + str(term.width) + " wide by " + str(term.height)+ " high")
        sys.exit()

def get_art_size(animation):
    global art_max_width
    global art_max_height
    #called from main first
    art_max_width = len(animation[0][0])
    art_max_height = len(animation[0])
   
def load_art(ascii_path):
    with open(ascii_path) as file:
        data = file.readlines()
    return data

def load_frames(animation_file_paths):
    animation = []
    for path in animation_file_paths:
        file = load_art(path)
        animation.append(file)
    return animation

# Handle all text input and return a list (pages) of wrapped lists (each line) eg wrapped_text[page][line]
def wrap_text(user_input): #recieve args.input list 
    cleaned_strings=[]
    wrapped_lines=[]
    page_num = 0
    for dirty_string in user_input: 
        cleaned_strings.append(dirty_string.replace("\n", " ").replace("\t", "").replace("  ", " ").replace("   ", " ")) 
    #debug("cleaned_strings = " + str(cleaned_strings))
    for string_num in range(0,len(cleaned_strings)): #pad all text on first load
        temp_wrapped_line = textwrap.wrap(cleaned_strings[string_num],width=space_for_text-1, initial_indent='',subsequent_indent='', replace_whitespace=True, expand_tabs=True, tabsize=1)
        wrapped_lines.append(temp_wrapped_line)
       # for item in temp_wrapped_line:
        #    wrapped_lines.append(item)
    #debug("wrapped_lines = " + str(wrapped_lines))
    line_num = 0
    page_num = 0
    while page_num in range(0,len(wrapped_lines)): #check each page
        page_continued=[]
        line_num = 0
        while len(wrapped_lines[page_num]) >= text_max_height: # if too many lines, insert a new page
            page_continued.insert(0,wrapped_lines[page_num].pop())
        if page_continued:
            temp_page_num = page_num + 1
            wrapped_lines.insert(temp_page_num, page_continued)
        else: # if page_continued empty continue to next page 
            page_num = page_num +1
    return wrapped_lines 

def get_file_paths():
    global animation_folder_path
    if os.path.isdir(animation_folder_path) is False:
        debug("ascii files not installed to ~/.config")
        animation_folder_path = "ascii/{}/".format(args.ascii)
    animation_file_paths = [os.path.join(r,file) for r,d,f in os.walk(animation_folder_path) for file in f]
    # sort files according to numbered extension
    sorted_file_paths = sorted(animation_file_paths)
    # print(str(sorted_file_paths))
    # sleep(3)
    return sorted_file_paths
    
def line_erase(line):
    #txt_erase = term.move_y(line) + ' '
    blank_space=' '
    print(term.move_xy(0, line) + term.clear_eol,end='',flush=True)

def randomdelay():
    #delaytime = random.uniform(0.00001,speed)
    delaytime = random.uniform(speed/2,speed)
    return delaytime

def render_speech_bubble(page,text_wrapped):
    # add length of text detection
    # print(term.clear + "drawing bubble!")
    longest = ''
    # figure out longest line
    for pg in text_wrapped:
        for line in pg:
            if len(line) > len(longest):
                longest = line
    longest_line = len(longest)
    length_of_page = len(text_wrapped[page])
    #right side vertical
    if len(text_wrapped[page]) == 1:
    #    for z in range(length_of_page_chars + 5, len(text_wrapped[page]), -1):
     #       print(term.move_xy(z,animation_mouth_line -2) + "-" ,end='',flush=True)
        print(term.move_xy(longest_line+ 6,animation_mouth_line -1) + "\\" ,end='',flush=True)
        side_char_r = ")"
    else:
        print(term.move_xy(longest_line + 5,animation_mouth_line) + "\\" ,end='',flush=True)
        side_char_r = "|"
    for y in range(1,length_of_page + 1): #right side
        print(term.move_xy(longest_line + 4,y) + side_char_r,end='',flush=True)
    #bottom and top horizontal
    #print(term.move_xy(longest_line + 3,0) + "*",end='',flush=True) #corners??
    for x in range(longest_line+2, 1, -1):
        #  print(term.move_xy(x,0) + term.style("underline", "                    " ),end='',flush=True)
        print(term.move_xy(x,0) + "-",end='',flush=True)
        print(term.move_xy(x,len(text_wrapped[page]) + 1) + "-",end='',flush=True)
        sleep(args.speed)
    #left side vertical
    if len(text_wrapped[page]) == 1:
        side_char_l = "("
    else:
        side_char_l = "|"
    for y in range(1, len(text_wrapped[page]) + 1):
        print(term.move_xy(0,y) + side_char_l,end='',flush=True)
 
def clear_bubble_and_text(page,text_wrapped):
    print(term.move_xy(space_for_text + 3,animation_mouth_line) + "  ",end='',flush=True)
    print(term.move_xy(space_for_text + 3,animation_mouth_line-1) + "  ",end='',flush=True)
    for y in range(0,len(text_wrapped[page]) + 4): #range(0,space_for_text + 3): #
        for x in range(0,space_for_text + 4):
            print(term.move_xy(x,y) + " ",end='',flush=True)
            sleep(args.clear)
   # prev_cleared = len(text_wrapped[page]) 
 
def clear_entire():
    print(term.move_xy(space_for_text + 3,animation_mouth_line) + "  ",end='',flush=True)
    print(term.move_xy(space_for_text + 3,animation_mouth_line-1) + "  ",end='',flush=True)
    for y in range(0,text_max_height + 3): 
        for x in range(0,space_for_text + 4):
            print(term.move_xy(x,y) + " ",end='',flush=True)

def clear_text_in_bubble():
    for y in range(text_max_height,0,-1):
        for x in range(space_for_text,0,-1):
            print(term.move_xy(x + h_padding_int ,y + v_padding_int) + ' ',end='',flush=True)

def render_text(threadname, page, text_wrapped):
    #threadname.join()
    for y in range(0, len(text_wrapped[page])): #text_max_height):
        for x in range(0, len(text_wrapped[page][y])): #space_for_text):
            #first print a bunch of random chars as if scrolling
            if args.nofx:
                for scroll_char in alphabet:
                    print(term.move_xy(x + h_padding_int ,y + v_padding_int) + scroll_char)
                    if scroll_char == text_wrapped[page][y][x].lower(): #scroll till correct character
                        break
                    sleep(randomdelay())
                    print(term.move_xy(x + h_padding_int ,y + v_padding_int) + ' ',end='',flush=True)
                    print(term.move_xy(x + h_padding_int ,y + v_padding_int) + text_wrapped[page][y][x],end='',flush=True)



                    if text_wrapped[page][y][x].lower() in ['.','!','?']:
                        sleep(0.1)
                        if x == (len(text_wrapped[page][y])-1): # x is at end of line
                            lookahead_y = y - 1
                            lookahead_x = 0
                        else:
                            lookahead_y = y
                            lookahead_x = x + 1

                        if text_wrapped[page][lookahead_y][lookahead_x] in [" ","."]: #if second char is 
                            print(term.move_xy(x + h_padding_int ,y + v_padding_int) + text_wrapped[page][y][x])
                            for scroll_char_pause in pause_alphabet:
                                print(term.move_xy(lookahead_x + h_padding_int ,lookahead_y + v_padding_int) + scroll_char_pause)
                                sleep(0.2)
                            print(term.move_xy(lookahead_x + h_padding_int ,lookahead_y + v_padding_int) + " ")
                            break
                        #else:
                         #   break
                        sleep(randomdelay())
                        
def render_animation(animation):
    while True:
        for frame_number in range(0,len(animation)):
            for y in range(0,art_max_height):
                for x in range(0, space_for_art):
                    targetx = x + space_for_text + 5
                    print(term.red + term.move_xy(targetx,y) + animation[frame_number][y][x] + term.normal) 
                    #term.color_rgb()
            sleep(args.framerate)

def start_animation_thread(animation):
    animate = multiprocessing.Process(target=render_animation, args=(animation,),daemon=True)
   # animate = threading.Thread(target=render_animation, args=(animation,))
   # animate.daemon = True
    animate.start()
    return animate

def start_animate_text_thread(page,text_wrapped):
    ## instead of spawning a new mutliprocess this should pass to text render process pipe
    name = "text" + str(page)
    animate_text = multiprocessing.Process(target=render_text, args=(name,page,text_wrapped,),daemon=True)
    animate_text.start()
    #animate_text = myThread(name,page,text_wrapped)
    #animate_text.daemon = True
    #animate_text.start()

    return animate_text

def prev_page(page,text_wrapped): 
    if page != 0:
        clear_bubble_and_text(page+1,text_wrapped) #clear the last page
    else:
        clear_entire()
        render_speech_bubble(page,text_wrapped)
    animate_text = start_animate_text_thread(page,text_wrapped) #render the current page
    return animate_text

def next_page(page,text_wrapped): 
    #needs to handle 0
    if page != 0:
        clear_bubble_and_text(page-1,text_wrapped) #clear the previous page
    else:
        clear_entire() #clear the previous page
    render_speech_bubble(page,text_wrapped)
    animate_text = start_animate_text_thread(page,text_wrapped) #render the current page
    return animate_text

def run_command(input):
    #command is string, split via spaces and reassemble as array
    if not isinstance(input, list):
        command = input.split(" ")
    else:
        command = input
    try:
        command_raw=[]
        command_raw.append((subprocess.run(command, capture_output=True)).stdout.decode())
        return command_raw
    except:
        #print("\n\n\n\nFAILED TO RUN COMMAND")
        #sleep(4)
        command_raw.append('failed to run command: ' + input)
        return command_raw

def user_input_options(text_wrapped,text_max_height):
    # with term.cbreak(): #enter interactive mod
        #while True:
        val = ''
       # val = term.inkey(timeout=5)
        selected_page = 0
        if args.execute:
            restart_text = "[r]un command"
        else:
            restart_text = "[r]estart"
        while val.lower() != 'q':
            val = term.inkey(timeout=5)
            if len(text_wrapped) == 1: # if on last page of text
                line_erase(text_max_height + 1)
                print(term.move_xy(0,text_max_height + 1) + restart_text + " [q]uit",end='',flush=True)
            elif selected_page == len(text_wrapped)-1: # if on last page of text
                line_erase(text_max_height + 1)
                print(term.move_xy(0,text_max_height + 1) + "[p]rev " + restart_text + " [q]uit",end='',flush=True)
            elif selected_page == 0: # if on first page of text
                line_erase(text_max_height + 1)
                print(term.move_xy(0,text_max_height + 1) + "[n]ext " + restart_text + " [q]uit",end='',flush=True)
            else:
                line_erase(text_max_height + 1)
                print(term.move_xy(0,text_max_height + 1) + "[n]ext [p]rev " + restart_text + " [q]uit",end='',flush=True)
            if val.lower() == 'r':
                line_erase(text_max_height + 1)
                if args.execute:
                    text_wrapped = wrap_text(run_command(args.execute))
                    print(term.move_xy(0,text_max_height + 1) + "rerun...",end='',flush=True)
                else:
                    print(term.move_xy(0,text_max_height + 1) + "restart...",end='',flush=True)
                sleep(0.5)
                selected_page = 0
                #print(term.clear,flush=True)
                #animate_text.kill() ### why does this end??
                animate_text = next_page(selected_page,text_wrapped)
                #break
            elif val.lower() == 'n':
                line_erase(text_max_height + 1)
                #print(term.move_xy(0,text_max_height + 1) + "loading...",end='',flush=True)
                if selected_page == len(text_wrapped)-1:
                    line_erase(text_max_height + 1)
                    print(term.move_xy(0,text_max_height + 1) + "last page..",end='',flush=True)
                 #   sleep(0.5)
                else:
                    selected_page = selected_page + 1
                    animate_text = next_page(selected_page, text_wrapped)

                sleep(0.5)
                break
            elif val.lower() == 'p':
                if selected_page == 0:
                    line_erase(text_max_height + 1)
                    print(term.move_xy(0,text_max_height + 1) + "first page..",end='',flush=True)
                else:
                    selected_page = selected_page - 1
                    animate_text = prev_page(selected_page, text_wrapped)
                sleep(0.5)
                break
            elif val.lower() == 'q':
                line_erase(text_max_height + 1)
                print(term.move_xy(0,text_max_height + 1) + "quitting..",end='',flush=True)
                sleep(0.3)
                print(term.exit_fullscreen())
                sys.exit()


if __name__ == "__main__":
    try:
        debug("starting main()")
        page_num = 0
        num_page = 0
        signal.signal(signal.SIGWINCH, on_resize)
        animation_file_paths = get_file_paths()
        animation = load_frames(animation_file_paths)
        check_term(animation)
        calculate_working_area()
        with term.cbreak(), term.hidden_cursor(), term.fullscreen():    # hide cursor and go fullscreen! 
            start_animation_thread(animation)                           # start the character animation thread
            while True: # enter main loop #dont lag it up ^^
                if speech_input:
                    #debug("speechinput")
                    text_wrapped = wrap_text(speech_input)
                elif args.execute:
                    #debug("commandinput")
                    text_wrapped = wrap_text(run_command(args.execute))
                else:
                    #debug("pipeinput")
                    text_wrapped = wrap_text(user_input)
                if args.auto:
                    while args.loop:
                        #if args.execute and args.loop is True:
                        
                           #animate_text = next_page(num_page, text_wrapped)        
                         #   animate_text.join()
                        for num_page in range(0,len(text_wrapped)): 
                            animate_text = next_page(num_page, text_wrapped)
                            animate_text.join()
                            sleep(args.pause) #add args.pause
                        if args.execute:
                            text_wrapped = wrap_text(run_command(args.execute))
                         
                    if not args.loop:
                        if args.timeout:
                            sleep(args.timeout)
                        else:
                            #here calc totalwords timing
                            for line in text_wrapped[page_num]:
                                totalchars = (totalchars + len(line))
                            sleeptime = ( totalchars / 30 ) + 1
                            sleep(sleeptime)
                        break # exiting this loop will end anisay
                else:
                    animate_text = next_page(page_num, text_wrapped)
                    user_input_options(text_wrapped,text_max_height)
                    #if page_num 
        debug("main Finished")
        sleep(1)
    except Exception as e:
        debug("Oops!", e.__class__, "occurred.")
        sys.exit(1)
    except (KeyboardInterrupt, SystemExit):
        print(term.exit_fullscreen())
        debug("KeyboardInterrupt Recieved, exiting...")
        sys.exit(0)
    finally:
        #animate_text.join()
        term.clear()
        term.exit_fullscreen()
        sys.exit(0)
            
